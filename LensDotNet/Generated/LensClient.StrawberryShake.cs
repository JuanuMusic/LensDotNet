// <auto-generated/>
#nullable enable

namespace LensDotNet.Client.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ProfileResult : global::System.IEquatable<ProfileResult>, IProfileResult
    {
        public ProfileResult(global::LensDotNet.Client.GraphQL.IProfile_Result? result)
        {
            Result = result;
        }

        public global::LensDotNet.Client.GraphQL.IProfile_Result? Result { get; }

        public virtual global::System.Boolean Equals(ProfileResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Result is null && other.Result is null) || Result != null && Result.Equals(other.Result)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ProfileResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Result != null)
                {
                    hash ^= 397 * Result.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The Profile
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_Profile : global::System.IEquatable<Profile_Result_Profile>, IProfile_Result_Profile
    {
        public Profile_Result_Profile(global::System.String __typename, global::System.String id, global::System.String? name, global::System.String? bio, global::System.String handle, global::System.String ownedBy, global::System.Collections.Generic.IReadOnlyList<global::System.String>? interests, global::LensDotNet.Client.GraphQL.IProfile_Result_Picture? picture, global::LensDotNet.Client.GraphQL.IProfile_Result_CoverPicture? coverPicture, global::LensDotNet.Client.GraphQL.IProfile_Result_Stats stats, global::LensDotNet.Client.GraphQL.IProfile_Result_FollowModule? followModule, global::System.Collections.Generic.IReadOnlyList<global::LensDotNet.Client.GraphQL.IProfile_Result_Attributes>? attributes, global::LensDotNet.Client.GraphQL.IProfile_Result_Dispatcher? dispatcher, global::System.Boolean isDefault, global::System.Boolean isFollowedByMe, global::System.Boolean isFollowing)
        {
            this.__typename = __typename;
            Id = id;
            Name = name;
            Bio = bio;
            Handle = handle;
            OwnedBy = ownedBy;
            Interests = interests;
            Picture = picture;
            CoverPicture = coverPicture;
            Stats = stats;
            FollowModule = followModule;
            Attributes = attributes;
            Dispatcher = dispatcher;
            IsDefault = isDefault;
            IsFollowedByMe = isFollowedByMe;
            IsFollowing = isFollowing;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The profile id
        /// </summary>
        public global::System.String Id { get; }

        /// <summary>
        /// Name of the profile
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// Bio of the profile
        /// </summary>
        public global::System.String? Bio { get; }

        /// <summary>
        /// The profile handle
        /// </summary>
        public global::System.String Handle { get; }

        /// <summary>
        /// Who owns the profile
        /// </summary>
        public global::System.String OwnedBy { get; }

        /// <summary>
        /// The profile interests
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Interests { get; }

        /// <summary>
        /// The picture for the profile
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_Picture? Picture { get; }

        /// <summary>
        /// The cover picture for the profile
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_CoverPicture? CoverPicture { get; }

        /// <summary>
        /// Profile stats
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_Stats Stats { get; }

        /// <summary>
        /// The follow module
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_FollowModule? FollowModule { get; }

        /// <summary>
        /// Optionals param to add extra attributes on the metadata
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::LensDotNet.Client.GraphQL.IProfile_Result_Attributes>? Attributes { get; }

        /// <summary>
        /// The dispatcher
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_Dispatcher? Dispatcher { get; }

        /// <summary>
        /// Is the profile default
        /// </summary>
        public global::System.Boolean IsDefault { get; }

        public global::System.Boolean IsFollowedByMe { get; }

        public global::System.Boolean IsFollowing { get; }

        public virtual global::System.Boolean Equals(Profile_Result_Profile? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && Id.Equals(other.Id) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Bio is null && other.Bio is null) || Bio != null && Bio.Equals(other.Bio)) && Handle.Equals(other.Handle) && OwnedBy.Equals(other.OwnedBy) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Interests, other.Interests) && ((Picture is null && other.Picture is null) || Picture != null && Picture.Equals(other.Picture)) && ((CoverPicture is null && other.CoverPicture is null) || CoverPicture != null && CoverPicture.Equals(other.CoverPicture)) && Stats.Equals(other.Stats) && ((FollowModule is null && other.FollowModule is null) || FollowModule != null && FollowModule.Equals(other.FollowModule)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Attributes, other.Attributes) && ((Dispatcher is null && other.Dispatcher is null) || Dispatcher != null && Dispatcher.Equals(other.Dispatcher)) && IsDefault == other.IsDefault && IsFollowedByMe == other.IsFollowedByMe && IsFollowing == other.IsFollowing;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_Profile)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Id.GetHashCode();
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Bio != null)
                {
                    hash ^= 397 * Bio.GetHashCode();
                }

                hash ^= 397 * Handle.GetHashCode();
                hash ^= 397 * OwnedBy.GetHashCode();
                if (Interests != null)
                {
                    foreach (var Interests_elm in Interests)
                    {
                        hash ^= 397 * Interests_elm.GetHashCode();
                    }
                }

                if (Picture != null)
                {
                    hash ^= 397 * Picture.GetHashCode();
                }

                if (CoverPicture != null)
                {
                    hash ^= 397 * CoverPicture.GetHashCode();
                }

                hash ^= 397 * Stats.GetHashCode();
                if (FollowModule != null)
                {
                    hash ^= 397 * FollowModule.GetHashCode();
                }

                if (Attributes != null)
                {
                    foreach (var Attributes_elm in Attributes)
                    {
                        hash ^= 397 * Attributes_elm.GetHashCode();
                    }
                }

                if (Dispatcher != null)
                {
                    hash ^= 397 * Dispatcher.GetHashCode();
                }

                hash ^= 397 * IsDefault.GetHashCode();
                hash ^= 397 * IsFollowedByMe.GetHashCode();
                hash ^= 397 * IsFollowing.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The NFT image
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_Picture_NftImage : global::System.IEquatable<Profile_Result_Picture_NftImage>, IProfile_Result_Picture_NftImage
    {
        public Profile_Result_Picture_NftImage(global::System.String __typename, global::System.String contractAddress, global::System.String tokenId, global::System.Uri uri, global::System.Boolean verified)
        {
            this.__typename = __typename;
            ContractAddress = contractAddress;
            TokenId = tokenId;
            Uri = uri;
            Verified = verified;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The contract address
        /// </summary>
        public global::System.String ContractAddress { get; }

        /// <summary>
        /// The token id of the nft
        /// </summary>
        public global::System.String TokenId { get; }

        /// <summary>
        /// The token image nft
        /// </summary>
        public global::System.Uri Uri { get; }

        /// <summary>
        /// If the NFT is verified
        /// </summary>
        public global::System.Boolean Verified { get; }

        public virtual global::System.Boolean Equals(Profile_Result_Picture_NftImage? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && ContractAddress.Equals(other.ContractAddress) && TokenId.Equals(other.TokenId) && Uri.Equals(other.Uri) && Verified == other.Verified;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_Picture_NftImage)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * ContractAddress.GetHashCode();
                hash ^= 397 * TokenId.GetHashCode();
                hash ^= 397 * Uri.GetHashCode();
                hash ^= 397 * Verified.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The Media Set
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_Picture_MediaSet : global::System.IEquatable<Profile_Result_Picture_MediaSet>, IProfile_Result_Picture_MediaSet
    {
        public Profile_Result_Picture_MediaSet(global::System.String __typename, global::LensDotNet.Client.GraphQL.IProfile_Result_Picture_Original original)
        {
            this.__typename = __typename;
            Original = original;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// Original media
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_Picture_Original Original { get; }

        public virtual global::System.Boolean Equals(Profile_Result_Picture_MediaSet? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && Original.Equals(other.Original);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_Picture_MediaSet)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Original.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The NFT image
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_CoverPicture_NftImage : global::System.IEquatable<Profile_Result_CoverPicture_NftImage>, IProfile_Result_CoverPicture_NftImage
    {
        public Profile_Result_CoverPicture_NftImage(global::System.String __typename, global::System.String contractAddress, global::System.String tokenId, global::System.Uri uri, global::System.Boolean verified)
        {
            this.__typename = __typename;
            ContractAddress = contractAddress;
            TokenId = tokenId;
            Uri = uri;
            Verified = verified;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The contract address
        /// </summary>
        public global::System.String ContractAddress { get; }

        /// <summary>
        /// The token id of the nft
        /// </summary>
        public global::System.String TokenId { get; }

        /// <summary>
        /// The token image nft
        /// </summary>
        public global::System.Uri Uri { get; }

        /// <summary>
        /// If the NFT is verified
        /// </summary>
        public global::System.Boolean Verified { get; }

        public virtual global::System.Boolean Equals(Profile_Result_CoverPicture_NftImage? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && ContractAddress.Equals(other.ContractAddress) && TokenId.Equals(other.TokenId) && Uri.Equals(other.Uri) && Verified == other.Verified;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_CoverPicture_NftImage)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * ContractAddress.GetHashCode();
                hash ^= 397 * TokenId.GetHashCode();
                hash ^= 397 * Uri.GetHashCode();
                hash ^= 397 * Verified.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The Media Set
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_CoverPicture_MediaSet : global::System.IEquatable<Profile_Result_CoverPicture_MediaSet>, IProfile_Result_CoverPicture_MediaSet
    {
        public Profile_Result_CoverPicture_MediaSet(global::System.String __typename, global::LensDotNet.Client.GraphQL.IProfile_Result_Picture_Original original)
        {
            this.__typename = __typename;
            Original = original;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// Original media
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_Picture_Original Original { get; }

        public virtual global::System.Boolean Equals(Profile_Result_CoverPicture_MediaSet? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && Original.Equals(other.Original);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_CoverPicture_MediaSet)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Original.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The Profile Stats
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_Stats_ProfileStats : global::System.IEquatable<Profile_Result_Stats_ProfileStats>, IProfile_Result_Stats_ProfileStats
    {
        public Profile_Result_Stats_ProfileStats(global::System.String __typename, global::System.Int32 totalFollowers, global::System.Int32 totalFollowing, global::System.Int32 totalPosts)
        {
            this.__typename = __typename;
            TotalFollowers = totalFollowers;
            TotalFollowing = totalFollowing;
            TotalPosts = totalPosts;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// Total follower count
        /// </summary>
        public global::System.Int32 TotalFollowers { get; }

        /// <summary>
        /// Total following count (remember the wallet follows not profile so will be same for every profile they own)
        /// </summary>
        public global::System.Int32 TotalFollowing { get; }

        /// <summary>
        /// Total post count
        /// </summary>
        public global::System.Int32 TotalPosts { get; }

        public virtual global::System.Boolean Equals(Profile_Result_Stats_ProfileStats? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && TotalFollowers == other.TotalFollowers && TotalFollowing == other.TotalFollowing && TotalPosts == other.TotalPosts;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_Stats_ProfileStats)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * TotalFollowers.GetHashCode();
                hash ^= 397 * TotalFollowing.GetHashCode();
                hash ^= 397 * TotalPosts.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_FollowModule_FeeFollowModuleSettings : global::System.IEquatable<Profile_Result_FollowModule_FeeFollowModuleSettings>, IProfile_Result_FollowModule_FeeFollowModuleSettings
    {
        public Profile_Result_FollowModule_FeeFollowModuleSettings(global::System.String __typename, global::LensDotNet.Client.GraphQL.IProfile_Result_FollowModule_Amount amount, global::System.String contractAddress, global::System.String recipient)
        {
            this.__typename = __typename;
            Amount = amount;
            ContractAddress = contractAddress;
            Recipient = recipient;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The collect module amount info
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_FollowModule_Amount Amount { get; }

        public global::System.String ContractAddress { get; }

        /// <summary>
        /// The collect module recipient address
        /// </summary>
        public global::System.String Recipient { get; }

        public virtual global::System.Boolean Equals(Profile_Result_FollowModule_FeeFollowModuleSettings? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && Amount.Equals(other.Amount) && ContractAddress.Equals(other.ContractAddress) && Recipient.Equals(other.Recipient);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_FollowModule_FeeFollowModuleSettings)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Amount.GetHashCode();
                hash ^= 397 * ContractAddress.GetHashCode();
                hash ^= 397 * Recipient.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_FollowModule_ProfileFollowModuleSettings : global::System.IEquatable<Profile_Result_FollowModule_ProfileFollowModuleSettings>, IProfile_Result_FollowModule_ProfileFollowModuleSettings
    {
        public Profile_Result_FollowModule_ProfileFollowModuleSettings(global::System.String __typename, global::System.String contractAddress)
        {
            this.__typename = __typename;
            ContractAddress = contractAddress;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public global::System.String ContractAddress { get; }

        public virtual global::System.Boolean Equals(Profile_Result_FollowModule_ProfileFollowModuleSettings? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && ContractAddress.Equals(other.ContractAddress);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_FollowModule_ProfileFollowModuleSettings)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * ContractAddress.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_FollowModule_RevertFollowModuleSettings : global::System.IEquatable<Profile_Result_FollowModule_RevertFollowModuleSettings>, IProfile_Result_FollowModule_RevertFollowModuleSettings
    {
        public Profile_Result_FollowModule_RevertFollowModuleSettings(global::System.String __typename, global::System.String contractAddress)
        {
            this.__typename = __typename;
            ContractAddress = contractAddress;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public global::System.String ContractAddress { get; }

        public virtual global::System.Boolean Equals(Profile_Result_FollowModule_RevertFollowModuleSettings? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && ContractAddress.Equals(other.ContractAddress);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_FollowModule_RevertFollowModuleSettings)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * ContractAddress.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_FollowModule_UnknownFollowModuleSettings : global::System.IEquatable<Profile_Result_FollowModule_UnknownFollowModuleSettings>, IProfile_Result_FollowModule_UnknownFollowModuleSettings
    {
        public Profile_Result_FollowModule_UnknownFollowModuleSettings(global::System.String __typename, global::System.String contractAddress)
        {
            this.__typename = __typename;
            ContractAddress = contractAddress;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        public global::System.String ContractAddress { get; }

        public virtual global::System.Boolean Equals(Profile_Result_FollowModule_UnknownFollowModuleSettings? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && ContractAddress.Equals(other.ContractAddress);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_FollowModule_UnknownFollowModuleSettings)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * ContractAddress.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The Profile
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_Attributes_Attribute : global::System.IEquatable<Profile_Result_Attributes_Attribute>, IProfile_Result_Attributes_Attribute
    {
        public Profile_Result_Attributes_Attribute(global::System.String __typename, global::System.String? displayType, global::System.String key, global::System.String @value)
        {
            this.__typename = __typename;
            DisplayType = displayType;
            Key = key;
            Value = @value;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The display type
        /// </summary>
        public global::System.String? DisplayType { get; }

        /// <summary>
        /// identifier of this attribute, we will update by this id 
        /// </summary>
        public global::System.String Key { get; }

        /// <summary>
        /// Value attribute
        /// </summary>
        public global::System.String Value { get; }

        public virtual global::System.Boolean Equals(Profile_Result_Attributes_Attribute? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && ((DisplayType is null && other.DisplayType is null) || DisplayType != null && DisplayType.Equals(other.DisplayType)) && Key.Equals(other.Key) && Value.Equals(other.Value);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_Attributes_Attribute)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                if (DisplayType != null)
                {
                    hash ^= 397 * DisplayType.GetHashCode();
                }

                hash ^= 397 * Key.GetHashCode();
                hash ^= 397 * Value.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The dispatcher
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_Dispatcher_Dispatcher : global::System.IEquatable<Profile_Result_Dispatcher_Dispatcher>, IProfile_Result_Dispatcher_Dispatcher
    {
        public Profile_Result_Dispatcher_Dispatcher(global::System.String address, global::System.Boolean canUseRelay)
        {
            Address = address;
            CanUseRelay = canUseRelay;
        }

        /// <summary>
        /// The dispatcher address
        /// </summary>
        public global::System.String Address { get; }

        /// <summary>
        /// If the dispatcher can use the relay
        /// </summary>
        public global::System.Boolean CanUseRelay { get; }

        public virtual global::System.Boolean Equals(Profile_Result_Dispatcher_Dispatcher? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Address.Equals(other.Address)) && CanUseRelay == other.CanUseRelay;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_Dispatcher_Dispatcher)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Address.GetHashCode();
                hash ^= 397 * CanUseRelay.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The Media url
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_Picture_Original_Media : global::System.IEquatable<Profile_Result_Picture_Original_Media>, IProfile_Result_Picture_Original_Media
    {
        public Profile_Result_Picture_Original_Media(global::System.String __typename, global::System.String? altTag, global::System.Uri? cover, global::System.String? mimeType, global::System.Uri url)
        {
            this.__typename = __typename;
            AltTag = altTag;
            Cover = cover;
            MimeType = mimeType;
            Url = url;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The alt tags for accessibility
        /// </summary>
        public global::System.String? AltTag { get; }

        /// <summary>
        /// The cover for any video or audio you attached
        /// </summary>
        public global::System.Uri? Cover { get; }

        /// <summary>
        /// The image/audio/video mime type for the publication
        /// </summary>
        public global::System.String? MimeType { get; }

        /// <summary>
        /// The token image nft
        /// </summary>
        public global::System.Uri Url { get; }

        public virtual global::System.Boolean Equals(Profile_Result_Picture_Original_Media? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && ((AltTag is null && other.AltTag is null) || AltTag != null && AltTag.Equals(other.AltTag)) && ((Cover is null && other.Cover is null) || Cover != null && Cover.Equals(other.Cover)) && ((MimeType is null && other.MimeType is null) || MimeType != null && MimeType.Equals(other.MimeType)) && Url.Equals(other.Url);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_Picture_Original_Media)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                if (AltTag != null)
                {
                    hash ^= 397 * AltTag.GetHashCode();
                }

                if (Cover != null)
                {
                    hash ^= 397 * Cover.GetHashCode();
                }

                if (MimeType != null)
                {
                    hash ^= 397 * MimeType.GetHashCode();
                }

                hash ^= 397 * Url.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The Media url
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_CoverPicture_Original_Media : global::System.IEquatable<Profile_Result_CoverPicture_Original_Media>, IProfile_Result_CoverPicture_Original_Media
    {
        public Profile_Result_CoverPicture_Original_Media(global::System.String __typename, global::System.String? altTag, global::System.Uri? cover, global::System.String? mimeType, global::System.Uri url)
        {
            this.__typename = __typename;
            AltTag = altTag;
            Cover = cover;
            MimeType = mimeType;
            Url = url;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The alt tags for accessibility
        /// </summary>
        public global::System.String? AltTag { get; }

        /// <summary>
        /// The cover for any video or audio you attached
        /// </summary>
        public global::System.Uri? Cover { get; }

        /// <summary>
        /// The image/audio/video mime type for the publication
        /// </summary>
        public global::System.String? MimeType { get; }

        /// <summary>
        /// The token image nft
        /// </summary>
        public global::System.Uri Url { get; }

        public virtual global::System.Boolean Equals(Profile_Result_CoverPicture_Original_Media? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && ((AltTag is null && other.AltTag is null) || AltTag != null && AltTag.Equals(other.AltTag)) && ((Cover is null && other.Cover is null) || Cover != null && Cover.Equals(other.Cover)) && ((MimeType is null && other.MimeType is null) || MimeType != null && MimeType.Equals(other.MimeType)) && Url.Equals(other.Url);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_CoverPicture_Original_Media)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                if (AltTag != null)
                {
                    hash ^= 397 * AltTag.GetHashCode();
                }

                if (Cover != null)
                {
                    hash ^= 397 * Cover.GetHashCode();
                }

                if (MimeType != null)
                {
                    hash ^= 397 * MimeType.GetHashCode();
                }

                hash ^= 397 * Url.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_FollowModule_Amount_ModuleFeeAmount : global::System.IEquatable<Profile_Result_FollowModule_Amount_ModuleFeeAmount>, IProfile_Result_FollowModule_Amount_ModuleFeeAmount
    {
        public Profile_Result_FollowModule_Amount_ModuleFeeAmount(global::System.String __typename, global::LensDotNet.Client.GraphQL.IProfile_Result_FollowModule_Amount_Asset asset, global::System.String @value)
        {
            this.__typename = __typename;
            Asset = asset;
            Value = @value;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The erc20 token info
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_FollowModule_Amount_Asset Asset { get; }

        /// <summary>
        /// Floating point number as string (e.g. 42.009837). It could have the entire precision of the Asset or be truncated to the last significant decimal.
        /// </summary>
        public global::System.String Value { get; }

        public virtual global::System.Boolean Equals(Profile_Result_FollowModule_Amount_ModuleFeeAmount? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && Asset.Equals(other.Asset) && Value.Equals(other.Value);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_FollowModule_Amount_ModuleFeeAmount)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Asset.GetHashCode();
                hash ^= 397 * Value.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The erc20 type
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_FollowModule_Amount_Asset_Erc20 : global::System.IEquatable<Profile_Result_FollowModule_Amount_Asset_Erc20>, IProfile_Result_FollowModule_Amount_Asset_Erc20
    {
        public Profile_Result_FollowModule_Amount_Asset_Erc20(global::System.String __typename, global::System.String name, global::System.String symbol, global::System.Int32 decimals, global::System.String address)
        {
            this.__typename = __typename;
            Name = name;
            Symbol = symbol;
            Decimals = decimals;
            Address = address;
        }

        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// Name of the symbol
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Symbol for the token
        /// </summary>
        public global::System.String Symbol { get; }

        /// <summary>
        /// Decimal places for the token
        /// </summary>
        public global::System.Int32 Decimals { get; }

        /// <summary>
        /// The erc20 address
        /// </summary>
        public global::System.String Address { get; }

        public virtual global::System.Boolean Equals(Profile_Result_FollowModule_Amount_Asset_Erc20? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (__typename.Equals(other.__typename)) && Name.Equals(other.Name) && Symbol.Equals(other.Symbol) && Decimals == other.Decimals && Address.Equals(other.Address);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((Profile_Result_FollowModule_Amount_Asset_Erc20)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * __typename.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Symbol.GetHashCode();
                hash ^= 397 * Decimals.GetHashCode();
                hash ^= 397 * Address.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfileResult
    {
        public global::LensDotNet.Client.GraphQL.IProfile_Result? Result { get; }
    }

    /// <summary>
    /// The Profile
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result
    {
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The profile id
        /// </summary>
        public global::System.String Id { get; }

        /// <summary>
        /// Name of the profile
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// Bio of the profile
        /// </summary>
        public global::System.String? Bio { get; }

        /// <summary>
        /// The profile handle
        /// </summary>
        public global::System.String Handle { get; }

        /// <summary>
        /// Who owns the profile
        /// </summary>
        public global::System.String OwnedBy { get; }

        /// <summary>
        /// The profile interests
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Interests { get; }

        /// <summary>
        /// The picture for the profile
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_Picture? Picture { get; }

        /// <summary>
        /// The cover picture for the profile
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_CoverPicture? CoverPicture { get; }

        /// <summary>
        /// Profile stats
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_Stats Stats { get; }

        /// <summary>
        /// The follow module
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_FollowModule? FollowModule { get; }

        /// <summary>
        /// Optionals param to add extra attributes on the metadata
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::LensDotNet.Client.GraphQL.IProfile_Result_Attributes>? Attributes { get; }

        /// <summary>
        /// The dispatcher
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_Dispatcher? Dispatcher { get; }

        /// <summary>
        /// Is the profile default
        /// </summary>
        public global::System.Boolean IsDefault { get; }

        public global::System.Boolean IsFollowedByMe { get; }

        public global::System.Boolean IsFollowing { get; }
    }

    /// <summary>
    /// The Profile
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_Profile : IProfile_Result
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_Picture
    {
    }

    /// <summary>
    /// The NFT image
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_Picture_NftImage : IProfile_Result_Picture
    {
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The contract address
        /// </summary>
        public global::System.String ContractAddress { get; }

        /// <summary>
        /// The token id of the nft
        /// </summary>
        public global::System.String TokenId { get; }

        /// <summary>
        /// The token image nft
        /// </summary>
        public global::System.Uri Uri { get; }

        /// <summary>
        /// If the NFT is verified
        /// </summary>
        public global::System.Boolean Verified { get; }
    }

    /// <summary>
    /// The Media Set
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_Picture_MediaSet : IProfile_Result_Picture
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_CoverPicture
    {
    }

    /// <summary>
    /// The NFT image
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_CoverPicture_NftImage : IProfile_Result_CoverPicture
    {
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The contract address
        /// </summary>
        public global::System.String ContractAddress { get; }

        /// <summary>
        /// The token id of the nft
        /// </summary>
        public global::System.String TokenId { get; }

        /// <summary>
        /// The token image nft
        /// </summary>
        public global::System.Uri Uri { get; }

        /// <summary>
        /// If the NFT is verified
        /// </summary>
        public global::System.Boolean Verified { get; }
    }

    /// <summary>
    /// The Media Set
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_CoverPicture_MediaSet : IProfile_Result_CoverPicture
    {
    }

    /// <summary>
    /// The Profile Stats
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_Stats
    {
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// Total follower count
        /// </summary>
        public global::System.Int32 TotalFollowers { get; }

        /// <summary>
        /// Total following count (remember the wallet follows not profile so will be same for every profile they own)
        /// </summary>
        public global::System.Int32 TotalFollowing { get; }

        /// <summary>
        /// Total post count
        /// </summary>
        public global::System.Int32 TotalPosts { get; }
    }

    /// <summary>
    /// The Profile Stats
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_Stats_ProfileStats : IProfile_Result_Stats
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_FollowModule
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_FollowModule_FeeFollowModuleSettings : IProfile_Result_FollowModule
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_FollowModule_ProfileFollowModuleSettings : IProfile_Result_FollowModule
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_FollowModule_RevertFollowModuleSettings : IProfile_Result_FollowModule
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_FollowModule_UnknownFollowModuleSettings : IProfile_Result_FollowModule
    {
    }

    /// <summary>
    /// The Profile
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IAttribute
    {
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The display type
        /// </summary>
        public global::System.String? DisplayType { get; }

        /// <summary>
        /// identifier of this attribute, we will update by this id 
        /// </summary>
        public global::System.String Key { get; }

        /// <summary>
        /// Value attribute
        /// </summary>
        public global::System.String Value { get; }
    }

    /// <summary>
    /// The Profile
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_Attributes : IAttribute
    {
    }

    /// <summary>
    /// The Profile
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_Attributes_Attribute : IProfile_Result_Attributes
    {
    }

    /// <summary>
    /// The dispatcher
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_Dispatcher
    {
        /// <summary>
        /// The dispatcher address
        /// </summary>
        public global::System.String Address { get; }

        /// <summary>
        /// If the dispatcher can use the relay
        /// </summary>
        public global::System.Boolean CanUseRelay { get; }
    }

    /// <summary>
    /// The dispatcher
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_Dispatcher_Dispatcher : IProfile_Result_Dispatcher
    {
    }

    /// <summary>
    /// The Media url
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IMedia
    {
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The alt tags for accessibility
        /// </summary>
        public global::System.String? AltTag { get; }

        /// <summary>
        /// The cover for any video or audio you attached
        /// </summary>
        public global::System.Uri? Cover { get; }

        /// <summary>
        /// The image/audio/video mime type for the publication
        /// </summary>
        public global::System.String? MimeType { get; }

        /// <summary>
        /// The token image nft
        /// </summary>
        public global::System.Uri Url { get; }
    }

    /// <summary>
    /// The Media url
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_Picture_Original : IMedia
    {
    }

    /// <summary>
    /// The Media url
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_Picture_Original_Media : IProfile_Result_Picture_Original
    {
    }

    /// <summary>
    /// The Media url
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_CoverPicture_Original : IMedia
    {
    }

    /// <summary>
    /// The Media url
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_CoverPicture_Original_Media : IProfile_Result_CoverPicture_Original
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IModuleFeeAmount
    {
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// The erc20 token info
        /// </summary>
        public global::LensDotNet.Client.GraphQL.IProfile_Result_FollowModule_Amount_Asset Asset { get; }

        /// <summary>
        /// Floating point number as string (e.g. 42.009837). It could have the entire precision of the Asset or be truncated to the last significant decimal.
        /// </summary>
        public global::System.String Value { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_FollowModule_Amount : IModuleFeeAmount
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_FollowModule_Amount_ModuleFeeAmount : IProfile_Result_FollowModule_Amount
    {
    }

    /// <summary>
    /// The erc20 type
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IErc20
    {
        /// <summary>
        /// The name of the current Object type at runtime.
        /// </summary>
        public global::System.String __typename { get; }

        /// <summary>
        /// Name of the symbol
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Symbol for the token
        /// </summary>
        public global::System.String Symbol { get; }

        /// <summary>
        /// Decimal places for the token
        /// </summary>
        public global::System.Int32 Decimals { get; }

        /// <summary>
        /// The erc20 address
        /// </summary>
        public global::System.String Address { get; }
    }

    /// <summary>
    /// The erc20 type
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_FollowModule_Amount_Asset : IErc20
    {
    }

    /// <summary>
    /// The erc20 type
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfile_Result_FollowModule_Amount_Asset_Erc20 : IProfile_Result_FollowModule_Amount_Asset
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class SingleProfileQueryRequestInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _profileIdFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _handleFormatter = default !;
        public global::System.String TypeName => "SingleProfileQueryRequest";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _profileIdFormatter = serializerResolver.GetInputValueFormatter("ProfileId");
            _handleFormatter = serializerResolver.GetInputValueFormatter("Handle");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::LensDotNet.Client.GraphQL.SingleProfileQueryRequest;
            var inputInfo = runtimeValue as global::LensDotNet.Client.GraphQL.State.ISingleProfileQueryRequestInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsProfileIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("profileId", FormatProfileId(input.ProfileId)));
            }

            if (inputInfo.IsHandleSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("handle", FormatHandle(input.Handle)));
            }

            return fields;
        }

        private global::System.Object? FormatProfileId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _profileIdFormatter.Format(input);
            }
        }

        private global::System.Object? FormatHandle(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _handleFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class SingleProfileQueryRequest : global::LensDotNet.Client.GraphQL.State.ISingleProfileQueryRequestInfo, global::System.IEquatable<SingleProfileQueryRequest>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SingleProfileQueryRequest)obj);
        }

        public virtual global::System.Boolean Equals(SingleProfileQueryRequest? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ProfileId is null && other.ProfileId is null) || ProfileId != null && ProfileId.Equals(other.ProfileId))) && ((Handle is null && other.Handle is null) || Handle != null && Handle.Equals(other.Handle));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ProfileId != null)
                {
                    hash ^= 397 * ProfileId.GetHashCode();
                }

                if (Handle != null)
                {
                    hash ^= 397 * Handle.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_profileId;
        private global::System.Boolean _set_profileId;
        private global::System.String? _value_handle;
        private global::System.Boolean _set_handle;
        ///<summary>The profile id</summary>
        public global::System.String? ProfileId
        {
            get => _value_profileId;
            set
            {
                _set_profileId = true;
                _value_profileId = value;
            }
        }

        global::System.Boolean global::LensDotNet.Client.GraphQL.State.ISingleProfileQueryRequestInfo.IsProfileIdSet => _set_profileId;
        ///<summary>The handle for the profile</summary>
        public global::System.String? Handle
        {
            get => _value_handle;
            set
            {
                _set_handle = true;
                _value_handle = value;
            }
        }

        global::System.Boolean global::LensDotNet.Client.GraphQL.State.ISingleProfileQueryRequestInfo.IsHandleSet => _set_handle;
    }

    /// <summary>
    /// Represents the operation service of the Profile GraphQL operation
    /// <code>
    /// query Profile($request: SingleProfileQueryRequest!, $observerId: ProfileId) {
    ///   result: profile(request: $request) {
    ///     __typename
    ///     id
    ///     name
    ///     bio
    ///     handle
    ///     ownedBy
    ///     interests
    ///     picture {
    ///       __typename
    ///       ... on NftImage {
    ///         __typename
    ///         contractAddress
    ///         tokenId
    ///         uri
    ///         verified
    ///       }
    ///       ... on MediaSet {
    ///         ... MediaSet
    ///       }
    ///     }
    ///     coverPicture {
    ///       __typename
    ///       ... on NftImage {
    ///         __typename
    ///         contractAddress
    ///         tokenId
    ///         uri
    ///         verified
    ///       }
    ///       ... on MediaSet {
    ///         ... MediaSet
    ///       }
    ///     }
    ///     stats {
    ///       __typename
    ///       totalFollowers
    ///       totalFollowing
    ///       totalPosts
    ///       ... on ProfileStats {
    ///         id
    ///       }
    ///     }
    ///     followModule {
    ///       __typename
    ///       ... on FeeFollowModuleSettings {
    ///         ... FeeFollowModuleSettings
    ///       }
    ///       ... on ProfileFollowModuleSettings {
    ///         ... ProfileFollowModuleSettings
    ///       }
    ///       ... on RevertFollowModuleSettings {
    ///         ... RevertFollowModuleSettings
    ///       }
    ///       ... on UnknownFollowModuleSettings {
    ///         ... UnknownFollowModuleSettings
    ///       }
    ///     }
    ///     attributes {
    ///       __typename
    ///       ... Attribute
    ///     }
    ///     dispatcher {
    ///       __typename
    ///       address
    ///       canUseRelay
    ///     }
    ///     isDefault
    ///     isFollowedByMe(isFinalisedOnChain: true)
    ///     isFollowing(who: $observerId)
    ///     ... on Profile {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MediaSet on MediaSet {
    ///   __typename
    ///   original {
    ///     __typename
    ///     ... Media
    ///   }
    /// }
    /// 
    /// fragment Media on Media {
    ///   __typename
    ///   altTag
    ///   cover
    ///   mimeType
    ///   url
    /// }
    /// 
    /// fragment FeeFollowModuleSettings on FeeFollowModuleSettings {
    ///   __typename
    ///   amount {
    ///     __typename
    ///     ... ModuleFeeAmount
    ///   }
    ///   contractAddress
    ///   recipient
    /// }
    /// 
    /// fragment ModuleFeeAmount on ModuleFeeAmount {
    ///   __typename
    ///   asset {
    ///     __typename
    ///     ... Erc20
    ///   }
    ///   value
    /// }
    /// 
    /// fragment Erc20 on Erc20 {
    ///   __typename
    ///   name
    ///   symbol
    ///   decimals
    ///   address
    /// }
    /// 
    /// fragment ProfileFollowModuleSettings on ProfileFollowModuleSettings {
    ///   __typename
    ///   contractAddress
    /// }
    /// 
    /// fragment RevertFollowModuleSettings on RevertFollowModuleSettings {
    ///   __typename
    ///   contractAddress
    /// }
    /// 
    /// fragment UnknownFollowModuleSettings on UnknownFollowModuleSettings {
    ///   __typename
    ///   contractAddress
    /// }
    /// 
    /// fragment Attribute on Attribute {
    ///   __typename
    ///   displayType
    ///   key
    ///   value
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ProfileQueryDocument : global::StrawberryShake.IDocument
    {
        private ProfileQueryDocument()
        {
        }

        public static ProfileQueryDocument Instance { get; } = new ProfileQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]
        {
            0x71,
            0x75,
            0x65,
            0x72,
            0x79,
            0x20,
            0x50,
            0x72,
            0x6f,
            0x66,
            0x69,
            0x6c,
            0x65,
            0x28,
            0x24,
            0x72,
            0x65,
            0x71,
            0x75,
            0x65,
            0x73,
            0x74,
            0x3a,
            0x20,
            0x53,
            0x69,
            0x6e,
            0x67,
            0x6c,
            0x65,
            0x50,
            0x72,
            0x6f,
            0x66,
            0x69,
            0x6c,
            0x65,
            0x51,
            0x75,
            0x65,
            0x72,
            0x79,
            0x52,
            0x65,
            0x71,
            0x75,
            0x65,
            0x73,
            0x74,
            0x21,
            0x2c,
            0x20,
            0x24,
            0x6f,
            0x62,
            0x73,
            0x65,
            0x72,
            0x76,
            0x65,
            0x72,
            0x49,
            0x64,
            0x3a,
            0x20,
            0x50,
            0x72,
            0x6f,
            0x66,
            0x69,
            0x6c,
            0x65,
            0x49,
            0x64,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x72,
            0x65,
            0x73,
            0x75,
            0x6c,
            0x74,
            0x3a,
            0x20,
            0x70,
            0x72,
            0x6f,
            0x66,
            0x69,
            0x6c,
            0x65,
            0x28,
            0x72,
            0x65,
            0x71,
            0x75,
            0x65,
            0x73,
            0x74,
            0x3a,
            0x20,
            0x24,
            0x72,
            0x65,
            0x71,
            0x75,
            0x65,
            0x73,
            0x74,
            0x29,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x69,
            0x64,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x62,
            0x69,
            0x6f,
            0x20,
            0x68,
            0x61,
            0x6e,
            0x64,
            0x6c,
            0x65,
            0x20,
            0x6f,
            0x77,
            0x6e,
            0x65,
            0x64,
            0x42,
            0x79,
            0x20,
            0x69,
            0x6e,
            0x74,
            0x65,
            0x72,
            0x65,
            0x73,
            0x74,
            0x73,
            0x20,
            0x70,
            0x69,
            0x63,
            0x74,
            0x75,
            0x72,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x4e,
            0x66,
            0x74,
            0x49,
            0x6d,
            0x61,
            0x67,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x6f,
            0x6e,
            0x74,
            0x72,
            0x61,
            0x63,
            0x74,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x74,
            0x6f,
            0x6b,
            0x65,
            0x6e,
            0x49,
            0x64,
            0x20,
            0x75,
            0x72,
            0x69,
            0x20,
            0x76,
            0x65,
            0x72,
            0x69,
            0x66,
            0x69,
            0x65,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x4d,
            0x65,
            0x64,
            0x69,
            0x61,
            0x53,
            0x65,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x4d,
            0x65,
            0x64,
            0x69,
            0x61,
            0x53,
            0x65,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x63,
            0x6f,
            0x76,
            0x65,
            0x72,
            0x50,
            0x69,
            0x63,
            0x74,
            0x75,
            0x72,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x4e,
            0x66,
            0x74,
            0x49,
            0x6d,
            0x61,
            0x67,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x6f,
            0x6e,
            0x74,
            0x72,
            0x61,
            0x63,
            0x74,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x74,
            0x6f,
            0x6b,
            0x65,
            0x6e,
            0x49,
            0x64,
            0x20,
            0x75,
            0x72,
            0x69,
            0x20,
            0x76,
            0x65,
            0x72,
            0x69,
            0x66,
            0x69,
            0x65,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x4d,
            0x65,
            0x64,
            0x69,
            0x61,
            0x53,
            0x65,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x4d,
            0x65,
            0x64,
            0x69,
            0x61,
            0x53,
            0x65,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x73,
            0x74,
            0x61,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x74,
            0x6f,
            0x74,
            0x61,
            0x6c,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x65,
            0x72,
            0x73,
            0x20,
            0x74,
            0x6f,
            0x74,
            0x61,
            0x6c,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x69,
            0x6e,
            0x67,
            0x20,
            0x74,
            0x6f,
            0x74,
            0x61,
            0x6c,
            0x50,
            0x6f,
            0x73,
            0x74,
            0x73,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x50,
            0x72,
            0x6f,
            0x66,
            0x69,
            0x6c,
            0x65,
            0x53,
            0x74,
            0x61,
            0x74,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x46,
            0x65,
            0x65,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x46,
            0x65,
            0x65,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x50,
            0x72,
            0x6f,
            0x66,
            0x69,
            0x6c,
            0x65,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x50,
            0x72,
            0x6f,
            0x66,
            0x69,
            0x6c,
            0x65,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x65,
            0x76,
            0x65,
            0x72,
            0x74,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x52,
            0x65,
            0x76,
            0x65,
            0x72,
            0x74,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x6e,
            0x6b,
            0x6e,
            0x6f,
            0x77,
            0x6e,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x55,
            0x6e,
            0x6b,
            0x6e,
            0x6f,
            0x77,
            0x6e,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x61,
            0x74,
            0x74,
            0x72,
            0x69,
            0x62,
            0x75,
            0x74,
            0x65,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x41,
            0x74,
            0x74,
            0x72,
            0x69,
            0x62,
            0x75,
            0x74,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x64,
            0x69,
            0x73,
            0x70,
            0x61,
            0x74,
            0x63,
            0x68,
            0x65,
            0x72,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x61,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x63,
            0x61,
            0x6e,
            0x55,
            0x73,
            0x65,
            0x52,
            0x65,
            0x6c,
            0x61,
            0x79,
            0x20,
            0x7d,
            0x20,
            0x69,
            0x73,
            0x44,
            0x65,
            0x66,
            0x61,
            0x75,
            0x6c,
            0x74,
            0x20,
            0x69,
            0x73,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x65,
            0x64,
            0x42,
            0x79,
            0x4d,
            0x65,
            0x28,
            0x69,
            0x73,
            0x46,
            0x69,
            0x6e,
            0x61,
            0x6c,
            0x69,
            0x73,
            0x65,
            0x64,
            0x4f,
            0x6e,
            0x43,
            0x68,
            0x61,
            0x69,
            0x6e,
            0x3a,
            0x20,
            0x74,
            0x72,
            0x75,
            0x65,
            0x29,
            0x20,
            0x69,
            0x73,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x69,
            0x6e,
            0x67,
            0x28,
            0x77,
            0x68,
            0x6f,
            0x3a,
            0x20,
            0x24,
            0x6f,
            0x62,
            0x73,
            0x65,
            0x72,
            0x76,
            0x65,
            0x72,
            0x49,
            0x64,
            0x29,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x50,
            0x72,
            0x6f,
            0x66,
            0x69,
            0x6c,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x69,
            0x64,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x4d,
            0x65,
            0x64,
            0x69,
            0x61,
            0x53,
            0x65,
            0x74,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x4d,
            0x65,
            0x64,
            0x69,
            0x61,
            0x53,
            0x65,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6f,
            0x72,
            0x69,
            0x67,
            0x69,
            0x6e,
            0x61,
            0x6c,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x4d,
            0x65,
            0x64,
            0x69,
            0x61,
            0x20,
            0x7d,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x4d,
            0x65,
            0x64,
            0x69,
            0x61,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x4d,
            0x65,
            0x64,
            0x69,
            0x61,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x61,
            0x6c,
            0x74,
            0x54,
            0x61,
            0x67,
            0x20,
            0x63,
            0x6f,
            0x76,
            0x65,
            0x72,
            0x20,
            0x6d,
            0x69,
            0x6d,
            0x65,
            0x54,
            0x79,
            0x70,
            0x65,
            0x20,
            0x75,
            0x72,
            0x6c,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x46,
            0x65,
            0x65,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x46,
            0x65,
            0x65,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x61,
            0x6d,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x46,
            0x65,
            0x65,
            0x41,
            0x6d,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x63,
            0x6f,
            0x6e,
            0x74,
            0x72,
            0x61,
            0x63,
            0x74,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x72,
            0x65,
            0x63,
            0x69,
            0x70,
            0x69,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x46,
            0x65,
            0x65,
            0x41,
            0x6d,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x46,
            0x65,
            0x65,
            0x41,
            0x6d,
            0x6f,
            0x75,
            0x6e,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x61,
            0x73,
            0x73,
            0x65,
            0x74,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x2e,
            0x2e,
            0x2e,
            0x20,
            0x45,
            0x72,
            0x63,
            0x32,
            0x30,
            0x20,
            0x7d,
            0x20,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x45,
            0x72,
            0x63,
            0x32,
            0x30,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x45,
            0x72,
            0x63,
            0x32,
            0x30,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x73,
            0x79,
            0x6d,
            0x62,
            0x6f,
            0x6c,
            0x20,
            0x64,
            0x65,
            0x63,
            0x69,
            0x6d,
            0x61,
            0x6c,
            0x73,
            0x20,
            0x61,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x50,
            0x72,
            0x6f,
            0x66,
            0x69,
            0x6c,
            0x65,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x50,
            0x72,
            0x6f,
            0x66,
            0x69,
            0x6c,
            0x65,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x6f,
            0x6e,
            0x74,
            0x72,
            0x61,
            0x63,
            0x74,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x52,
            0x65,
            0x76,
            0x65,
            0x72,
            0x74,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x52,
            0x65,
            0x76,
            0x65,
            0x72,
            0x74,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x6f,
            0x6e,
            0x74,
            0x72,
            0x61,
            0x63,
            0x74,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x55,
            0x6e,
            0x6b,
            0x6e,
            0x6f,
            0x77,
            0x6e,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x55,
            0x6e,
            0x6b,
            0x6e,
            0x6f,
            0x77,
            0x6e,
            0x46,
            0x6f,
            0x6c,
            0x6c,
            0x6f,
            0x77,
            0x4d,
            0x6f,
            0x64,
            0x75,
            0x6c,
            0x65,
            0x53,
            0x65,
            0x74,
            0x74,
            0x69,
            0x6e,
            0x67,
            0x73,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x63,
            0x6f,
            0x6e,
            0x74,
            0x72,
            0x61,
            0x63,
            0x74,
            0x41,
            0x64,
            0x64,
            0x72,
            0x65,
            0x73,
            0x73,
            0x20,
            0x7d,
            0x20,
            0x66,
            0x72,
            0x61,
            0x67,
            0x6d,
            0x65,
            0x6e,
            0x74,
            0x20,
            0x41,
            0x74,
            0x74,
            0x72,
            0x69,
            0x62,
            0x75,
            0x74,
            0x65,
            0x20,
            0x6f,
            0x6e,
            0x20,
            0x41,
            0x74,
            0x74,
            0x72,
            0x69,
            0x62,
            0x75,
            0x74,
            0x65,
            0x20,
            0x7b,
            0x20,
            0x5f,
            0x5f,
            0x74,
            0x79,
            0x70,
            0x65,
            0x6e,
            0x61,
            0x6d,
            0x65,
            0x20,
            0x64,
            0x69,
            0x73,
            0x70,
            0x6c,
            0x61,
            0x79,
            0x54,
            0x79,
            0x70,
            0x65,
            0x20,
            0x6b,
            0x65,
            0x79,
            0x20,
            0x76,
            0x61,
            0x6c,
            0x75,
            0x65,
            0x20,
            0x7d
        };
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "c4f65c43bcf3e7ed207ca42b1e3c920f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the Profile GraphQL operation
    /// <code>
    /// query Profile($request: SingleProfileQueryRequest!, $observerId: ProfileId) {
    ///   result: profile(request: $request) {
    ///     __typename
    ///     id
    ///     name
    ///     bio
    ///     handle
    ///     ownedBy
    ///     interests
    ///     picture {
    ///       __typename
    ///       ... on NftImage {
    ///         __typename
    ///         contractAddress
    ///         tokenId
    ///         uri
    ///         verified
    ///       }
    ///       ... on MediaSet {
    ///         ... MediaSet
    ///       }
    ///     }
    ///     coverPicture {
    ///       __typename
    ///       ... on NftImage {
    ///         __typename
    ///         contractAddress
    ///         tokenId
    ///         uri
    ///         verified
    ///       }
    ///       ... on MediaSet {
    ///         ... MediaSet
    ///       }
    ///     }
    ///     stats {
    ///       __typename
    ///       totalFollowers
    ///       totalFollowing
    ///       totalPosts
    ///       ... on ProfileStats {
    ///         id
    ///       }
    ///     }
    ///     followModule {
    ///       __typename
    ///       ... on FeeFollowModuleSettings {
    ///         ... FeeFollowModuleSettings
    ///       }
    ///       ... on ProfileFollowModuleSettings {
    ///         ... ProfileFollowModuleSettings
    ///       }
    ///       ... on RevertFollowModuleSettings {
    ///         ... RevertFollowModuleSettings
    ///       }
    ///       ... on UnknownFollowModuleSettings {
    ///         ... UnknownFollowModuleSettings
    ///       }
    ///     }
    ///     attributes {
    ///       __typename
    ///       ... Attribute
    ///     }
    ///     dispatcher {
    ///       __typename
    ///       address
    ///       canUseRelay
    ///     }
    ///     isDefault
    ///     isFollowedByMe(isFinalisedOnChain: true)
    ///     isFollowing(who: $observerId)
    ///     ... on Profile {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MediaSet on MediaSet {
    ///   __typename
    ///   original {
    ///     __typename
    ///     ... Media
    ///   }
    /// }
    /// 
    /// fragment Media on Media {
    ///   __typename
    ///   altTag
    ///   cover
    ///   mimeType
    ///   url
    /// }
    /// 
    /// fragment FeeFollowModuleSettings on FeeFollowModuleSettings {
    ///   __typename
    ///   amount {
    ///     __typename
    ///     ... ModuleFeeAmount
    ///   }
    ///   contractAddress
    ///   recipient
    /// }
    /// 
    /// fragment ModuleFeeAmount on ModuleFeeAmount {
    ///   __typename
    ///   asset {
    ///     __typename
    ///     ... Erc20
    ///   }
    ///   value
    /// }
    /// 
    /// fragment Erc20 on Erc20 {
    ///   __typename
    ///   name
    ///   symbol
    ///   decimals
    ///   address
    /// }
    /// 
    /// fragment ProfileFollowModuleSettings on ProfileFollowModuleSettings {
    ///   __typename
    ///   contractAddress
    /// }
    /// 
    /// fragment RevertFollowModuleSettings on RevertFollowModuleSettings {
    ///   __typename
    ///   contractAddress
    /// }
    /// 
    /// fragment UnknownFollowModuleSettings on UnknownFollowModuleSettings {
    ///   __typename
    ///   contractAddress
    /// }
    /// 
    /// fragment Attribute on Attribute {
    ///   __typename
    ///   displayType
    ///   key
    ///   value
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ProfileQuery : global::LensDotNet.Client.GraphQL.IProfileQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IProfileResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _singleProfileQueryRequestFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _profileIdFormatter;
        public ProfileQuery(global::StrawberryShake.IOperationExecutor<IProfileResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _singleProfileQueryRequestFormatter = serializerResolver.GetInputValueFormatter("SingleProfileQueryRequest");
            _profileIdFormatter = serializerResolver.GetInputValueFormatter("ProfileId");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IProfileResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IProfileResult>> ExecuteAsync(global::LensDotNet.Client.GraphQL.SingleProfileQueryRequest request, global::System.String? observerId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(request, observerId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IProfileResult>> Watch(global::LensDotNet.Client.GraphQL.SingleProfileQueryRequest request, global::System.String? observerId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(request, observerId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::LensDotNet.Client.GraphQL.SingleProfileQueryRequest request, global::System.String? observerId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("request", FormatRequest(request));
            variables.Add("observerId", FormatObserverId(observerId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ProfileQueryDocument.Instance.Hash.Value, name: "Profile", document: ProfileQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatRequest(global::LensDotNet.Client.GraphQL.SingleProfileQueryRequest value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _singleProfileQueryRequestFormatter.Format(value);
        }

        private global::System.Object? FormatObserverId(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _profileIdFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the Profile GraphQL operation
    /// <code>
    /// query Profile($request: SingleProfileQueryRequest!, $observerId: ProfileId) {
    ///   result: profile(request: $request) {
    ///     __typename
    ///     id
    ///     name
    ///     bio
    ///     handle
    ///     ownedBy
    ///     interests
    ///     picture {
    ///       __typename
    ///       ... on NftImage {
    ///         __typename
    ///         contractAddress
    ///         tokenId
    ///         uri
    ///         verified
    ///       }
    ///       ... on MediaSet {
    ///         ... MediaSet
    ///       }
    ///     }
    ///     coverPicture {
    ///       __typename
    ///       ... on NftImage {
    ///         __typename
    ///         contractAddress
    ///         tokenId
    ///         uri
    ///         verified
    ///       }
    ///       ... on MediaSet {
    ///         ... MediaSet
    ///       }
    ///     }
    ///     stats {
    ///       __typename
    ///       totalFollowers
    ///       totalFollowing
    ///       totalPosts
    ///       ... on ProfileStats {
    ///         id
    ///       }
    ///     }
    ///     followModule {
    ///       __typename
    ///       ... on FeeFollowModuleSettings {
    ///         ... FeeFollowModuleSettings
    ///       }
    ///       ... on ProfileFollowModuleSettings {
    ///         ... ProfileFollowModuleSettings
    ///       }
    ///       ... on RevertFollowModuleSettings {
    ///         ... RevertFollowModuleSettings
    ///       }
    ///       ... on UnknownFollowModuleSettings {
    ///         ... UnknownFollowModuleSettings
    ///       }
    ///     }
    ///     attributes {
    ///       __typename
    ///       ... Attribute
    ///     }
    ///     dispatcher {
    ///       __typename
    ///       address
    ///       canUseRelay
    ///     }
    ///     isDefault
    ///     isFollowedByMe(isFinalisedOnChain: true)
    ///     isFollowing(who: $observerId)
    ///     ... on Profile {
    ///       id
    ///     }
    ///   }
    /// }
    /// 
    /// fragment MediaSet on MediaSet {
    ///   __typename
    ///   original {
    ///     __typename
    ///     ... Media
    ///   }
    /// }
    /// 
    /// fragment Media on Media {
    ///   __typename
    ///   altTag
    ///   cover
    ///   mimeType
    ///   url
    /// }
    /// 
    /// fragment FeeFollowModuleSettings on FeeFollowModuleSettings {
    ///   __typename
    ///   amount {
    ///     __typename
    ///     ... ModuleFeeAmount
    ///   }
    ///   contractAddress
    ///   recipient
    /// }
    /// 
    /// fragment ModuleFeeAmount on ModuleFeeAmount {
    ///   __typename
    ///   asset {
    ///     __typename
    ///     ... Erc20
    ///   }
    ///   value
    /// }
    /// 
    /// fragment Erc20 on Erc20 {
    ///   __typename
    ///   name
    ///   symbol
    ///   decimals
    ///   address
    /// }
    /// 
    /// fragment ProfileFollowModuleSettings on ProfileFollowModuleSettings {
    ///   __typename
    ///   contractAddress
    /// }
    /// 
    /// fragment RevertFollowModuleSettings on RevertFollowModuleSettings {
    ///   __typename
    ///   contractAddress
    /// }
    /// 
    /// fragment UnknownFollowModuleSettings on UnknownFollowModuleSettings {
    ///   __typename
    ///   contractAddress
    /// }
    /// 
    /// fragment Attribute on Attribute {
    ///   __typename
    ///   displayType
    ///   key
    ///   value
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfileQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IProfileResult>> ExecuteAsync(global::LensDotNet.Client.GraphQL.SingleProfileQueryRequest request, global::System.String? observerId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IProfileResult>> Watch(global::LensDotNet.Client.GraphQL.SingleProfileQueryRequest request, global::System.String? observerId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the LensClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class LensClient : global::LensDotNet.Client.GraphQL.ILensClient
    {
        private readonly global::LensDotNet.Client.GraphQL.IProfileQuery _profile;
        public LensClient(global::LensDotNet.Client.GraphQL.IProfileQuery profile)
        {
            _profile = profile ?? throw new global::System.ArgumentNullException(nameof(profile));
        }

        public static global::System.String ClientName => "LensClient";
        public global::LensDotNet.Client.GraphQL.IProfileQuery Profile => _profile;
    }

    /// <summary>
    /// Represents the LensClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface ILensClient
    {
        global::LensDotNet.Client.GraphQL.IProfileQuery Profile { get; }
    }
}

namespace LensDotNet.Client.GraphQL.State
{
    ///<summary>The Profile</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ProfileEntity
    {
        public ProfileEntity(global::System.String __typename = default !, global::System.String id = default !, global::System.String? name = default !, global::System.String? bio = default !, global::System.String handle = default !, global::System.String ownedBy = default !, global::System.Collections.Generic.IReadOnlyList<global::System.String>? interests = default !, global::LensDotNet.Client.GraphQL.State.IProfileMediaData? picture = default !, global::LensDotNet.Client.GraphQL.State.IProfileMediaData? coverPicture = default !, global::StrawberryShake.EntityId stats = default !, global::LensDotNet.Client.GraphQL.State.IFollowModuleData? followModule = default !, global::System.Collections.Generic.IReadOnlyList<global::LensDotNet.Client.GraphQL.State.AttributeData>? attributes = default !, global::LensDotNet.Client.GraphQL.State.DispatcherData? dispatcher = default !, global::System.Boolean isDefault = default !, global::System.Boolean isFollowedByMe = default !, global::System.Boolean isFollowing = default !)
        {
            this.__typename = __typename;
            Id = id;
            Name = name;
            Bio = bio;
            Handle = handle;
            OwnedBy = ownedBy;
            Interests = interests;
            Picture = picture;
            CoverPicture = coverPicture;
            Stats = stats;
            FollowModule = followModule;
            Attributes = attributes;
            Dispatcher = dispatcher;
            IsDefault = isDefault;
            IsFollowedByMe = isFollowedByMe;
            IsFollowing = isFollowing;
        }

        ///<summary>The name of the current Object type at runtime.</summary>
        public global::System.String __typename { get; }

        ///<summary>The profile id</summary>
        public global::System.String Id { get; }

        ///<summary>Name of the profile</summary>
        public global::System.String? Name { get; }

        ///<summary>Bio of the profile</summary>
        public global::System.String? Bio { get; }

        ///<summary>The profile handle</summary>
        public global::System.String Handle { get; }

        ///<summary>Who owns the profile</summary>
        public global::System.String OwnedBy { get; }

        ///<summary>The profile interests</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Interests { get; }

        ///<summary>The picture for the profile</summary>
        public global::LensDotNet.Client.GraphQL.State.IProfileMediaData? Picture { get; }

        ///<summary>The cover picture for the profile</summary>
        public global::LensDotNet.Client.GraphQL.State.IProfileMediaData? CoverPicture { get; }

        ///<summary>Profile stats</summary>
        public global::StrawberryShake.EntityId Stats { get; }

        ///<summary>The follow module</summary>
        public global::LensDotNet.Client.GraphQL.State.IFollowModuleData? FollowModule { get; }

        ///<summary>Optionals param to add extra attributes on the metadata</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::LensDotNet.Client.GraphQL.State.AttributeData>? Attributes { get; }

        ///<summary>The dispatcher</summary>
        public global::LensDotNet.Client.GraphQL.State.DispatcherData? Dispatcher { get; }

        ///<summary>Is the profile default</summary>
        public global::System.Boolean IsDefault { get; }

        public global::System.Boolean IsFollowedByMe { get; }

        public global::System.Boolean IsFollowing { get; }
    }

    ///<summary>The Profile Stats</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ProfileStatsEntity
    {
        public ProfileStatsEntity(global::System.String __typename = default !, global::System.Int32 totalFollowers = default !, global::System.Int32 totalFollowing = default !, global::System.Int32 totalPosts = default !)
        {
            this.__typename = __typename;
            TotalFollowers = totalFollowers;
            TotalFollowing = totalFollowing;
            TotalPosts = totalPosts;
        }

        ///<summary>The name of the current Object type at runtime.</summary>
        public global::System.String __typename { get; }

        ///<summary>Total follower count</summary>
        public global::System.Int32 TotalFollowers { get; }

        ///<summary>Total following count (remember the wallet follows not profile so will be same for every profile they own)</summary>
        public global::System.Int32 TotalFollowing { get; }

        ///<summary>Total post count</summary>
        public global::System.Int32 TotalPosts { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ProfileResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::LensDotNet.Client.GraphQL.ProfileResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::LensDotNet.Client.GraphQL.State.ProfileEntity, Profile_Result_Profile> _profile_Result_ProfileFromProfileEntityMapper;
        public ProfileResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::LensDotNet.Client.GraphQL.State.ProfileEntity, Profile_Result_Profile> profile_Result_ProfileFromProfileEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _profile_Result_ProfileFromProfileEntityMapper = profile_Result_ProfileFromProfileEntityMapper ?? throw new global::System.ArgumentNullException(nameof(profile_Result_ProfileFromProfileEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::LensDotNet.Client.GraphQL.IProfileResult);
        public ProfileResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ProfileResultInfo info)
            {
                return new ProfileResult(MapIProfile_Result(info.Result, snapshot));
            }

            throw new global::System.ArgumentException("ProfileResultInfo expected.");
        }

        private global::LensDotNet.Client.GraphQL.IProfile_Result? MapIProfile_Result(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Profile", global::System.StringComparison.Ordinal))
            {
                return _profile_Result_ProfileFromProfileEntityMapper.Map(snapshot.GetEntity<global::LensDotNet.Client.GraphQL.State.ProfileEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ProfileResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ProfileResultInfo(global::StrawberryShake.EntityId? result, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Result = result;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? Result { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ProfileResultInfo(Result, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_ProfileFromProfileEntityMapper : global::StrawberryShake.IEntityMapper<global::LensDotNet.Client.GraphQL.State.ProfileEntity, Profile_Result_Profile>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::LensDotNet.Client.GraphQL.State.ProfileStatsEntity, Profile_Result_Stats_ProfileStats> _profile_Result_Stats_ProfileStatsFromProfileStatsEntityMapper;
        public Profile_Result_ProfileFromProfileEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::LensDotNet.Client.GraphQL.State.ProfileStatsEntity, Profile_Result_Stats_ProfileStats> profile_Result_Stats_ProfileStatsFromProfileStatsEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _profile_Result_Stats_ProfileStatsFromProfileStatsEntityMapper = profile_Result_Stats_ProfileStatsFromProfileStatsEntityMapper ?? throw new global::System.ArgumentNullException(nameof(profile_Result_Stats_ProfileStatsFromProfileStatsEntityMapper));
        }

        public Profile_Result_Profile Map(global::LensDotNet.Client.GraphQL.State.ProfileEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Profile_Result_Profile(entity.__typename, entity.Id, entity.Name, entity.Bio, entity.Handle, entity.OwnedBy, entity.Interests, MapIProfile_Result_Picture(entity.Picture, snapshot), MapIProfile_Result_CoverPicture(entity.CoverPicture, snapshot), MapNonNullableIProfile_Result_Stats(entity.Stats, snapshot), MapIProfile_Result_FollowModule(entity.FollowModule, snapshot), MapIProfile_Result_AttributesNonNullableArray(entity.Attributes, snapshot), MapIProfile_Result_Dispatcher(entity.Dispatcher, snapshot), entity.IsDefault, entity.IsFollowedByMe, entity.IsFollowing);
        }

        private global::LensDotNet.Client.GraphQL.IProfile_Result_Picture? MapIProfile_Result_Picture(global::LensDotNet.Client.GraphQL.State.IProfileMediaData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IProfile_Result_Picture? returnValue;
            if (data is global::LensDotNet.Client.GraphQL.State.NftImageData nftImage)
            {
                if (!nftImage.Verified.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::LensDotNet.Client.GraphQL.Profile_Result_Picture_NftImage(nftImage.__typename ?? throw new global::System.ArgumentNullException(), nftImage.ContractAddress ?? throw new global::System.ArgumentNullException(), nftImage.TokenId ?? throw new global::System.ArgumentNullException(), nftImage.Uri ?? throw new global::System.ArgumentNullException(), nftImage.Verified!.Value);
            }
            else if (data is global::LensDotNet.Client.GraphQL.State.MediaSetData mediaSet)
            {
                returnValue = new global::LensDotNet.Client.GraphQL.Profile_Result_Picture_MediaSet(mediaSet.__typename ?? throw new global::System.ArgumentNullException(), MapNonNullableIProfile_Result_Picture_Original(mediaSet.Original, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::LensDotNet.Client.GraphQL.IProfile_Result_Picture_Original MapNonNullableIProfile_Result_Picture_Original(global::LensDotNet.Client.GraphQL.State.MediaData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IProfile_Result_Picture_Original returnValue = default !;
            if (data.__typename.Equals("Media", global::System.StringComparison.Ordinal))
            {
                returnValue = new Profile_Result_Picture_Original_Media(data.__typename ?? throw new global::System.ArgumentNullException(), data.AltTag, data.Cover, data.MimeType, data.Url ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::LensDotNet.Client.GraphQL.IProfile_Result_CoverPicture? MapIProfile_Result_CoverPicture(global::LensDotNet.Client.GraphQL.State.IProfileMediaData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IProfile_Result_CoverPicture? returnValue;
            if (data is global::LensDotNet.Client.GraphQL.State.NftImageData nftImage)
            {
                if (!nftImage.Verified.HasValue)
                {
                    throw new global::System.ArgumentNullException();
                }

                returnValue = new global::LensDotNet.Client.GraphQL.Profile_Result_CoverPicture_NftImage(nftImage.__typename ?? throw new global::System.ArgumentNullException(), nftImage.ContractAddress ?? throw new global::System.ArgumentNullException(), nftImage.TokenId ?? throw new global::System.ArgumentNullException(), nftImage.Uri ?? throw new global::System.ArgumentNullException(), nftImage.Verified!.Value);
            }
            else if (data is global::LensDotNet.Client.GraphQL.State.MediaSetData mediaSet)
            {
                returnValue = new global::LensDotNet.Client.GraphQL.Profile_Result_CoverPicture_MediaSet(mediaSet.__typename ?? throw new global::System.ArgumentNullException(), MapNonNullableIProfile_Result_Picture_Original(mediaSet.Original, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::LensDotNet.Client.GraphQL.IProfile_Result_Stats MapNonNullableIProfile_Result_Stats(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ProfileStats", global::System.StringComparison.Ordinal))
            {
                return _profile_Result_Stats_ProfileStatsFromProfileStatsEntityMapper.Map(snapshot.GetEntity<global::LensDotNet.Client.GraphQL.State.ProfileStatsEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::LensDotNet.Client.GraphQL.IProfile_Result_FollowModule? MapIProfile_Result_FollowModule(global::LensDotNet.Client.GraphQL.State.IFollowModuleData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IProfile_Result_FollowModule? returnValue;
            if (data is global::LensDotNet.Client.GraphQL.State.FeeFollowModuleSettingsData feeFollowModuleSettings)
            {
                returnValue = new global::LensDotNet.Client.GraphQL.Profile_Result_FollowModule_FeeFollowModuleSettings(feeFollowModuleSettings.__typename ?? throw new global::System.ArgumentNullException(), MapNonNullableIProfile_Result_FollowModule_Amount(feeFollowModuleSettings.Amount, snapshot), feeFollowModuleSettings.ContractAddress ?? throw new global::System.ArgumentNullException(), feeFollowModuleSettings.Recipient ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::LensDotNet.Client.GraphQL.State.ProfileFollowModuleSettingsData profileFollowModuleSettings)
            {
                returnValue = new global::LensDotNet.Client.GraphQL.Profile_Result_FollowModule_ProfileFollowModuleSettings(profileFollowModuleSettings.__typename ?? throw new global::System.ArgumentNullException(), profileFollowModuleSettings.ContractAddress ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::LensDotNet.Client.GraphQL.State.RevertFollowModuleSettingsData revertFollowModuleSettings)
            {
                returnValue = new global::LensDotNet.Client.GraphQL.Profile_Result_FollowModule_RevertFollowModuleSettings(revertFollowModuleSettings.__typename ?? throw new global::System.ArgumentNullException(), revertFollowModuleSettings.ContractAddress ?? throw new global::System.ArgumentNullException());
            }
            else if (data is global::LensDotNet.Client.GraphQL.State.UnknownFollowModuleSettingsData unknownFollowModuleSettings)
            {
                returnValue = new global::LensDotNet.Client.GraphQL.Profile_Result_FollowModule_UnknownFollowModuleSettings(unknownFollowModuleSettings.__typename ?? throw new global::System.ArgumentNullException(), unknownFollowModuleSettings.ContractAddress ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::LensDotNet.Client.GraphQL.IProfile_Result_FollowModule_Amount MapNonNullableIProfile_Result_FollowModule_Amount(global::LensDotNet.Client.GraphQL.State.ModuleFeeAmountData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IProfile_Result_FollowModule_Amount returnValue = default !;
            if (data.__typename.Equals("ModuleFeeAmount", global::System.StringComparison.Ordinal))
            {
                returnValue = new Profile_Result_FollowModule_Amount_ModuleFeeAmount(data.__typename ?? throw new global::System.ArgumentNullException(), MapNonNullableIProfile_Result_FollowModule_Amount_Asset(data.Asset ?? throw new global::System.ArgumentNullException(), snapshot), data.Value ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::LensDotNet.Client.GraphQL.IProfile_Result_FollowModule_Amount_Asset MapNonNullableIProfile_Result_FollowModule_Amount_Asset(global::LensDotNet.Client.GraphQL.State.Erc20Data data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IProfile_Result_FollowModule_Amount_Asset returnValue = default !;
            if (data.__typename.Equals("Erc20", global::System.StringComparison.Ordinal))
            {
                returnValue = new Profile_Result_FollowModule_Amount_Asset_Erc20(data.__typename ?? throw new global::System.ArgumentNullException(), data.Name ?? throw new global::System.ArgumentNullException(), data.Symbol ?? throw new global::System.ArgumentNullException(), data.Decimals ?? throw new global::System.ArgumentNullException(), data.Address ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::LensDotNet.Client.GraphQL.IProfile_Result_Attributes>? MapIProfile_Result_AttributesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::LensDotNet.Client.GraphQL.State.AttributeData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var attributes = new global::System.Collections.Generic.List<global::LensDotNet.Client.GraphQL.IProfile_Result_Attributes>();
            foreach (global::LensDotNet.Client.GraphQL.State.AttributeData child in list)
            {
                attributes.Add(MapNonNullableIProfile_Result_Attributes(child, snapshot));
            }

            return attributes;
        }

        private global::LensDotNet.Client.GraphQL.IProfile_Result_Attributes MapNonNullableIProfile_Result_Attributes(global::LensDotNet.Client.GraphQL.State.AttributeData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IProfile_Result_Attributes returnValue = default !;
            if (data.__typename.Equals("Attribute", global::System.StringComparison.Ordinal))
            {
                returnValue = new Profile_Result_Attributes_Attribute(data.__typename ?? throw new global::System.ArgumentNullException(), data.DisplayType, data.Key ?? throw new global::System.ArgumentNullException(), data.Value ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::LensDotNet.Client.GraphQL.IProfile_Result_Dispatcher? MapIProfile_Result_Dispatcher(global::LensDotNet.Client.GraphQL.State.DispatcherData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IProfile_Result_Dispatcher returnValue = default !;
            if (data?.__typename.Equals("Dispatcher", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new Profile_Result_Dispatcher_Dispatcher(data.Address ?? throw new global::System.ArgumentNullException(), data.CanUseRelay ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Profile_Result_Stats_ProfileStatsFromProfileStatsEntityMapper : global::StrawberryShake.IEntityMapper<global::LensDotNet.Client.GraphQL.State.ProfileStatsEntity, Profile_Result_Stats_ProfileStats>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public Profile_Result_Stats_ProfileStatsFromProfileStatsEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public Profile_Result_Stats_ProfileStats Map(global::LensDotNet.Client.GraphQL.State.ProfileStatsEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new Profile_Result_Stats_ProfileStats(entity.__typename, entity.TotalFollowers, entity.TotalFollowing, entity.TotalPosts);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    internal interface ISingleProfileQueryRequestInfo
    {
        global::System.Boolean IsProfileIdSet { get; }

        global::System.Boolean IsHandleSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ProfileBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::LensDotNet.Client.GraphQL.IProfileResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::LensDotNet.Client.GraphQL.IProfileResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _profileIdParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _handleParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ethereumAddressParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _profileInterestParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _contractAddressParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Uri> _urlParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _mimeTypeParser;
        public ProfileBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::LensDotNet.Client.GraphQL.IProfileResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _profileIdParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ProfileId") ?? throw new global::System.ArgumentException("No serializer for type `ProfileId` found.");
            _handleParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("Handle") ?? throw new global::System.ArgumentException("No serializer for type `Handle` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _ethereumAddressParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("EthereumAddress") ?? throw new global::System.ArgumentException("No serializer for type `EthereumAddress` found.");
            _profileInterestParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ProfileInterest") ?? throw new global::System.ArgumentException("No serializer for type `ProfileInterest` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _contractAddressParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ContractAddress") ?? throw new global::System.ArgumentException("No serializer for type `ContractAddress` found.");
            _urlParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Uri>("Url") ?? throw new global::System.ArgumentException("No serializer for type `Url` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _mimeTypeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("MimeType") ?? throw new global::System.ArgumentException("No serializer for type `MimeType` found.");
        }

        public global::StrawberryShake.IOperationResult<IProfileResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IProfileResult Result, ProfileResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]
                    {
                        new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?> { { "body", response.Body?.RootElement.ToString() } })
                    };
                }
            }

            return new global::StrawberryShake.OperationResult<IProfileResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IProfileResult, ProfileResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? resultId = default !;
            _entityStore.Update(session =>
            {
                resultId = UpdateIProfile_ResultEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "result"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ProfileResultInfo(resultId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIProfile_ResultEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Profile", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::LensDotNet.Client.GraphQL.State.ProfileEntity? entity))
                {
                    session.SetEntity(entityId, new global::LensDotNet.Client.GraphQL.State.ProfileEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "__typename")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bio")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "handle")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ownedBy")), DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "interests")), DeserializeIProfileMediaData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "picture")), DeserializeIProfileMediaData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "coverPicture")), UpdateNonNullableIProfile_Result_StatsEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stats"), entityIds), DeserializeIFollowModuleData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "followModule")), DeserializeIProfile_Result_AttributesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attributes")), DeserializeIProfile_Result_Dispatcher(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dispatcher")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isDefault")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isFollowedByMe")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isFollowing"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::LensDotNet.Client.GraphQL.State.ProfileEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "__typename")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "bio")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "handle")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ownedBy")), DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "interests")), DeserializeIProfileMediaData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "picture")), DeserializeIProfileMediaData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "coverPicture")), UpdateNonNullableIProfile_Result_StatsEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "stats"), entityIds), DeserializeIFollowModuleData(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "followModule")), DeserializeIProfile_Result_AttributesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "attributes")), DeserializeIProfile_Result_Dispatcher(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dispatcher")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isDefault")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isFollowedByMe")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isFollowing"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var profileInterests = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                profileInterests.Add(DeserializeNonNullableString(child));
            }

            return profileInterests;
        }

        private global::LensDotNet.Client.GraphQL.State.IProfileMediaData? DeserializeIProfileMediaData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("NftImage", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LensDotNet.Client.GraphQL.State.NftImageData(typename, contractAddress: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "contractAddress")), tokenId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "tokenId")), uri: DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "uri")), verified: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "verified")));
            }

            if (typename?.Equals("MediaSet", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LensDotNet.Client.GraphQL.State.MediaSetData(typename, original: DeserializeNonNullableIProfile_Result_Picture_Original(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "original")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Uri DeserializeNonNullableUri(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _urlParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::LensDotNet.Client.GraphQL.State.MediaData DeserializeNonNullableIProfile_Result_Picture_Original(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Media", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LensDotNet.Client.GraphQL.State.MediaData(typename, altTag: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "altTag")), cover: DeserializeUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "cover")), mimeType: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mimeType")), url: DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Uri? DeserializeUri(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _urlParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIProfile_Result_StatsEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ProfileStats", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::LensDotNet.Client.GraphQL.State.ProfileStatsEntity? entity))
                {
                    session.SetEntity(entityId, new global::LensDotNet.Client.GraphQL.State.ProfileStatsEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "__typename")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalFollowers")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalFollowing")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalPosts"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::LensDotNet.Client.GraphQL.State.ProfileStatsEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "__typename")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalFollowers")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalFollowing")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalPosts"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::LensDotNet.Client.GraphQL.State.IFollowModuleData? DeserializeIFollowModuleData(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("FeeFollowModuleSettings", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LensDotNet.Client.GraphQL.State.FeeFollowModuleSettingsData(typename, amount: DeserializeNonNullableIProfile_Result_FollowModule_Amount(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "amount")), contractAddress: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "contractAddress")), recipient: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "recipient")));
            }

            if (typename?.Equals("ProfileFollowModuleSettings", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LensDotNet.Client.GraphQL.State.ProfileFollowModuleSettingsData(typename, contractAddress: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "contractAddress")));
            }

            if (typename?.Equals("RevertFollowModuleSettings", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LensDotNet.Client.GraphQL.State.RevertFollowModuleSettingsData(typename, contractAddress: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "contractAddress")));
            }

            if (typename?.Equals("UnknownFollowModuleSettings", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LensDotNet.Client.GraphQL.State.UnknownFollowModuleSettingsData(typename, contractAddress: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "contractAddress")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::LensDotNet.Client.GraphQL.State.ModuleFeeAmountData DeserializeNonNullableIProfile_Result_FollowModule_Amount(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ModuleFeeAmount", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LensDotNet.Client.GraphQL.State.ModuleFeeAmountData(typename, asset: DeserializeNonNullableIProfile_Result_FollowModule_Amount_Asset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "asset")), @value: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::LensDotNet.Client.GraphQL.State.Erc20Data DeserializeNonNullableIProfile_Result_FollowModule_Amount_Asset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Erc20", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LensDotNet.Client.GraphQL.State.Erc20Data(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), symbol: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "symbol")), decimals: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "decimals")), address: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::LensDotNet.Client.GraphQL.State.AttributeData>? DeserializeIProfile_Result_AttributesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var attributes = new global::System.Collections.Generic.List<global::LensDotNet.Client.GraphQL.State.AttributeData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                attributes.Add(DeserializeNonNullableIProfile_Result_Attributes(child));
            }

            return attributes;
        }

        private global::LensDotNet.Client.GraphQL.State.AttributeData DeserializeNonNullableIProfile_Result_Attributes(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Attribute", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LensDotNet.Client.GraphQL.State.AttributeData(typename, displayType: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "displayType")), key: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "key")), @value: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "value")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::LensDotNet.Client.GraphQL.State.DispatcherData? DeserializeIProfile_Result_Dispatcher(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("Dispatcher", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::LensDotNet.Client.GraphQL.State.DispatcherData(typename, address: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "address")), canUseRelay: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "canUseRelay")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    ///<summary>The NFT image</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IProfileMediaData
    {
        global::System.String __typename { get; }
    }

    ///<summary>The NFT image</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class NftImageData : IProfileMediaData
    {
        public NftImageData(global::System.String __typename, global::System.String? contractAddress = default !, global::System.String? tokenId = default !, global::System.Uri? uri = default !, global::System.Boolean? verified = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ContractAddress = contractAddress;
            TokenId = tokenId;
            Uri = uri;
            Verified = verified;
        }

        public global::System.String __typename { get; }

        ///<summary>The contract address</summary>
        public global::System.String? ContractAddress { get; }

        ///<summary>The token id of the nft</summary>
        public global::System.String? TokenId { get; }

        ///<summary>The token image nft</summary>
        public global::System.Uri? Uri { get; }

        ///<summary>If the NFT is verified</summary>
        public global::System.Boolean? Verified { get; }
    }

    ///<summary>The Media Set</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MediaSetData : IProfileMediaData
    {
        public MediaSetData(global::System.String __typename, global::LensDotNet.Client.GraphQL.State.MediaData? original = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Original = original;
        }

        public global::System.String __typename { get; }

        ///<summary>Original media</summary>
        public global::LensDotNet.Client.GraphQL.State.MediaData? Original { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial interface IFollowModuleData
    {
        global::System.String __typename { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class FeeFollowModuleSettingsData : IFollowModuleData
    {
        public FeeFollowModuleSettingsData(global::System.String __typename, global::LensDotNet.Client.GraphQL.State.ModuleFeeAmountData? amount = default !, global::System.String? contractAddress = default !, global::System.String? recipient = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Amount = amount;
            ContractAddress = contractAddress;
            Recipient = recipient;
        }

        public global::System.String __typename { get; }

        ///<summary>The collect module amount info</summary>
        public global::LensDotNet.Client.GraphQL.State.ModuleFeeAmountData? Amount { get; }

        public global::System.String? ContractAddress { get; }

        ///<summary>The collect module recipient address</summary>
        public global::System.String? Recipient { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ProfileFollowModuleSettingsData : IFollowModuleData
    {
        public ProfileFollowModuleSettingsData(global::System.String __typename, global::System.String? contractAddress = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ContractAddress = contractAddress;
        }

        public global::System.String __typename { get; }

        public global::System.String? ContractAddress { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class RevertFollowModuleSettingsData : IFollowModuleData
    {
        public RevertFollowModuleSettingsData(global::System.String __typename, global::System.String? contractAddress = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ContractAddress = contractAddress;
        }

        public global::System.String __typename { get; }

        public global::System.String? ContractAddress { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class UnknownFollowModuleSettingsData : IFollowModuleData
    {
        public UnknownFollowModuleSettingsData(global::System.String __typename, global::System.String? contractAddress = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ContractAddress = contractAddress;
        }

        public global::System.String __typename { get; }

        public global::System.String? ContractAddress { get; }
    }

    ///<summary>The Profile</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class AttributeData
    {
        public AttributeData(global::System.String __typename, global::System.String? displayType = default !, global::System.String? key = default !, global::System.String? @value = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            DisplayType = displayType;
            Key = key;
            Value = @value;
        }

        public global::System.String __typename { get; }

        ///<summary>The display type</summary>
        public global::System.String? DisplayType { get; }

        ///<summary>identifier of this attribute, we will update by this id </summary>
        public global::System.String? Key { get; }

        ///<summary>Value attribute</summary>
        public global::System.String? Value { get; }
    }

    ///<summary>The dispatcher</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class DispatcherData
    {
        public DispatcherData(global::System.String __typename, global::System.String? address = default !, global::System.Boolean? canUseRelay = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Address = address;
            CanUseRelay = canUseRelay;
        }

        public global::System.String __typename { get; }

        ///<summary>The dispatcher address</summary>
        public global::System.String? Address { get; }

        ///<summary>If the dispatcher can use the relay</summary>
        public global::System.Boolean? CanUseRelay { get; }
    }

    ///<summary>The Media url</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class MediaData
    {
        public MediaData(global::System.String __typename, global::System.String? altTag = default !, global::System.Uri? cover = default !, global::System.String? mimeType = default !, global::System.Uri? url = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            AltTag = altTag;
            Cover = cover;
            MimeType = mimeType;
            Url = url;
        }

        public global::System.String __typename { get; }

        ///<summary>The alt tags for accessibility</summary>
        public global::System.String? AltTag { get; }

        ///<summary>The cover for any video or audio you attached</summary>
        public global::System.Uri? Cover { get; }

        ///<summary>The image/audio/video mime type for the publication</summary>
        public global::System.String? MimeType { get; }

        ///<summary>The token image nft</summary>
        public global::System.Uri? Url { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class ModuleFeeAmountData
    {
        public ModuleFeeAmountData(global::System.String __typename, global::LensDotNet.Client.GraphQL.State.Erc20Data? asset = default !, global::System.String? @value = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Asset = asset;
            Value = @value;
        }

        public global::System.String __typename { get; }

        ///<summary>The erc20 token info</summary>
        public global::LensDotNet.Client.GraphQL.State.Erc20Data? Asset { get; }

        ///<summary>Floating point number as string (e.g. 42.009837). It could have the entire precision of the Asset or be truncated to the last significant decimal.</summary>
        public global::System.String? Value { get; }
    }

    ///<summary>The erc20 type</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class Erc20Data
    {
        public Erc20Data(global::System.String __typename, global::System.String? name = default !, global::System.String? symbol = default !, global::System.Int32? decimals = default !, global::System.String? address = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            Symbol = symbol;
            Decimals = decimals;
            Address = address;
        }

        public global::System.String __typename { get; }

        ///<summary>Name of the symbol</summary>
        public global::System.String? Name { get; }

        ///<summary>Symbol for the token</summary>
        public global::System.String? Symbol { get; }

        ///<summary>Decimal places for the token</summary>
        public global::System.Int32? Decimals { get; }

        ///<summary>The erc20 address</summary>
        public global::System.String? Address { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class LensClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {
            Indented = false
        };
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Profile" => ParseProfileEntityId(obj, __typename),
                "ProfileStats" => ParseProfileStatsEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Profile" => FormatProfileEntityId(entityId),
                "ProfileStats" => FormatProfileStatsEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseProfileEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatProfileEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseProfileStatsEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatProfileStatsEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public partial class LensClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public LensClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.18.0.0")]
    public static partial class LensClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::LensDotNet.Client.GraphQL.State.LensClientStoreAccessor> AddLensClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::LensDotNet.Client.GraphQL.State.LensClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LensDotNet.Client.GraphQL.ProfileQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LensDotNet.Client.GraphQL.LensClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LensDotNet.Client.GraphQL.ILensClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::LensDotNet.Client.GraphQL.State.LensClientStoreAccessor>("LensClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("LensClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::LensDotNet.Client.GraphQL.State.ProfileEntity, global::LensDotNet.Client.GraphQL.Profile_Result_Profile>, global::LensDotNet.Client.GraphQL.State.Profile_Result_ProfileFromProfileEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::LensDotNet.Client.GraphQL.State.ProfileStatsEntity, global::LensDotNet.Client.GraphQL.Profile_Result_Stats_ProfileStats>, global::LensDotNet.Client.GraphQL.State.Profile_Result_Stats_ProfileStatsFromProfileStatsEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ProfileId"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("Handle"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("EthereumAddress"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ProfileInterest"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ContractAddress"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("MimeType"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::LensDotNet.Client.GraphQL.SingleProfileQueryRequestInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::LensDotNet.Client.GraphQL.IProfileResult>, global::LensDotNet.Client.GraphQL.State.ProfileResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::LensDotNet.Client.GraphQL.IProfileResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LensDotNet.Client.GraphQL.IProfileQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::LensDotNet.Client.GraphQL.IProfileResult>, global::LensDotNet.Client.GraphQL.State.ProfileBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::LensDotNet.Client.GraphQL.IProfileResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::LensDotNet.Client.GraphQL.IProfileResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::LensDotNet.Client.GraphQL.IProfileResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::LensDotNet.Client.GraphQL.ProfileQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::LensDotNet.Client.GraphQL.IProfileQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LensDotNet.Client.GraphQL.ProfileQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::LensDotNet.Client.GraphQL.State.LensClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::LensDotNet.Client.GraphQL.LensClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::LensDotNet.Client.GraphQL.ILensClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::LensDotNet.Client.GraphQL.LensClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
